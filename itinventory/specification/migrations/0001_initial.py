# Generated by Django 4.0.2 on 2022-02-14 07:25

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Asset_running_number',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_type', models.CharField(max_length=100)),
                ('running_number', models.CharField(max_length=1000)),
            ],
            options={
                'verbose_name': 'Asset Running Number',
                'db_table': 'Asset_running_number',
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Brand_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Hardware_type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hardware_type', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Hardware Type',
                'db_table': 'Hardware_type',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Location',
                'db_table': 'Location',
            },
        ),
        migrations.CreateModel(
            name='Microsoft_office',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('microsoft_office', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Microsoft Office',
                'db_table': 'Microsoft_office',
            },
        ),
        migrations.CreateModel(
            name='Modellaptop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Modellaptop_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ModelPC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ModelPC_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ModelPCMachine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ModelPCMAchine_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='NetworkAsset_block',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('networkAsset_block', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Network Asset Block',
                'db_table': 'NetworkAsset_block',
            },
        ),
        migrations.CreateModel(
            name='NetworkAsset_brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('networkAsset_brand', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Network Asset Brand Type',
                'db_table': 'NetworkAsset_brand',
            },
        ),
        migrations.CreateModel(
            name='NetworkAsset_location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('networkAsset_location', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Network Asset Location',
                'db_table': 'NetworkAsset_location',
            },
        ),
        migrations.CreateModel(
            name='NetworkAsset_vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('networkAsset_vendor', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Network Asset Vendor',
                'db_table': 'NetworkAsset_vendor',
            },
        ),
        migrations.CreateModel(
            name='NetworkHardwareModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
                ('asset_type', models.CharField(max_length=1000)),
            ],
            options={
                'verbose_name': 'Network Hardware Model',
                'db_table': 'NetworkHardwareModel',
            },
        ),
        migrations.CreateModel(
            name='Processor_type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Processor_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Ram_type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ram_type', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Ram Type',
                'db_table': 'Ram_type',
            },
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Software_name', models.CharField(max_length=100)),
                ('Software_version', models.CharField(max_length=100)),
                ('software_type', models.CharField(choices=[('Concurrent', 'Concurrent'), ('Non-Concurrent', 'Non-Concurrent')], max_length=100)),
                ('software_quantity', models.CharField(max_length=100)),
                ('software_quantity_left', models.CharField(max_length=100)),
                ('Software_po', models.CharField(blank=True, max_length=100)),
                ('Software_DOP', models.DateField(blank=True, null=True)),
                ('software_DOP_year', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='storagevalue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Storagevalue', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Storage Value',
                'db_table': 'storagevalue',
            },
        ),
        migrations.CreateModel(
            name='vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendorname', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Vendor',
                'db_table': 'vendor',
            },
        ),
        migrations.CreateModel(
            name='Windows',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('windows', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Window',
                'db_table': 'Windows',
            },
        ),
    ]
